= content_for :header do
  = @resume

script type="application/ld+json"
  == sanitize render partial: 'schemas/resume.json', locals: { resume: @resume, educations: @resume_educations, works: @resume_works }

/ .d-flex.mb-3.text-muted
/   .d-flex.mr-4
/     .mr-2= t('.published')
/     .font-weight-light
/       = distance_of_time_in_words_to_now @resume.created_at
/   .d-flex.mr-4
/     .mr-2= t('.views')
/     .font-weight-light= 3
/   .d-flex.mr-4
/     .mr-2= t('.answers')
/     .font-weight-light= 3
/   .d-flex.mr-4
/     .mr-2= t('.likes')
/     .font-weight-light= 3

- if @resume.archived?
  .alert.alert-warning= t('.archived')

- if policy(@resume).download?
  .mb-2.d-flex.justify-content-end
    = link_to resume_pdf_path(@resume, 'base', format: :pdf),
              class: 'mr-3', title: t('.print'), target: :_blank do
      i.fas.fa-print
    = link_to resume_pdf_path(@resume, 'base'), title: t('.download') do
      i.fas.fa-download

.mb-5
  = render 'information'

  .mt-3
    - if @resume.comments.any?
      .small
        - @resume.comments.each do |comment|
          hr.my-2
          .d-flex(id="comment-#{comment.id}")
            .mr-auto
              span.mr-1.hexlet-cv-content.hexlet-cv-inline-paragraph
                == markdown2html comment.content
              - if comment.user
                span.mr-1
                  = link_to comment.user, user_path(comment.user)
              = link_to l(comment.created_at, format: :short), url_for(anchor: "comment-#{comment.id}"), class: 'text-muted'
            - if comment.user == current_user
              .d-flex
                .mr-2
                  = link_to edit_resume_comment_path(@resume, comment)
                    i.fas.fa-pen.text-secondary

                div
                  = link_to resume_comment_path(@resume, comment), method: :delete, data: { confirm: t('confirm') } do
                    i.fas.fa-times.text-secondary
    hr.my-2
    a.d-block.small.text-muted(href="#new_resume_comment-#{@resume.id}" data-toggle="collapse")
      = t('.add_a_comment')
    .collapse(id="new_resume_comment-#{@resume.id}")
      - if user_signed_in?
        = render 'web/shared/comment_form', comment: @resume.comments.build, url: resume_comments_path(@resume)
      - else
        = render 'comment_requires'

- if @resume_answers.any?
  .lead.mb-3= t('.recomendations')

  - @resume_answers.each do |answer|
    .card.mb-4(id="answer-#{answer.id}")
      .card-header.small.mb-2.d-flex
        .mr-auto.d-flex
          span.font-weight-bold= link_to answer.user, user_path(answer.user)
          span.mx-2.font-weight-light
            = link_to distance_of_time_in_words_to_now(answer.created_at), url_for(anchor: "answer-#{answer.id}"), class: 'text-muted'

          - if current_user == answer.user
            .d-flex.mr-3
              .mr-2
                = link_to edit_resume_answer_path(@resume, answer) do
                  i.fas.fa-pen.text-secondary
              div
                = link_to resume_answer_path(@resume, answer), method: :delete, data: { confirm: t('confirm') } do
                  i.fas.fa-times.text-secondary

        div
          - if answer.pending? && current_user == @resume.user
            // FIXME: Data params does not work
            = link_to t('.apply'), change_applying_state_resume_answer_path(@resume, answer),
              data: { confirm: t('confirm'), params: { event: :apply }.to_param },
              method: :patch,
              class: 'badge badge-success p-1',
              title: t('.title_apply')
          - elsif answer.applied?
              span.text-success= answer.aasm(:applying).human_state
          - else answer.pending?
              span.text-info= answer.aasm(:applying).human_state

      .card-body.d-flex
        .mr-3.h4
          - let @current_user_likes_by_answer_id.fetch(answer.id, nil) do |like|
            .text-center.text-muted.mb-2.mt-1.font-weight-light
              = answer.likes.count
            - if like
              = link_to answer_like_path(answer, like), method: 'delete', class: 'text-decoration-none' do
                i.fas.fa-thumbs-up.text-secondary
            - else
              = link_to answer_likes_path(answer), method: 'post', class: 'text-decoration-none' do
                i.far.fa-thumbs-up.text-secondary
        .w-100
          .hexlet-cv-content.mb-3
            == markdown2html answer.content
          - if answer.comments.any?
            .small
              - answer.comments.each do |comment|
                hr.my-2
                .d-flex(id="answer_comment-#{comment.id}")
                  .mr-auto
                    span.mr-2.hexlet-cv-content.hexlet-cv-inline-paragraph
                      == markdown2html comment.content
                    - if comment.user
                      span.mr-1
                        = link_to comment.user, user_path(comment.user)
                    = link_to l(comment.created_at, format: :short), url_for(anchor: "answer_comment-#{comment.id}"), class: 'text-muted'
                  - if comment.user == current_user
                    .d-flex
                      .mr-2
                        = link_to edit_answer_comment_path(answer, comment)
                          i.fas.fa-pen.text-secondary
                      div
                        = link_to answer_comment_path(answer, comment), method: :delete, data: { confirm: t('confirm') } do
                          i.fas.fa-times.text-secondary
          hr.my-2
          a.d-block.small.text-muted(href="#new_answer_comment-#{answer.id}" data-toggle="collapse")
            = t('.add_a_comment')
          .collapse(id="new_answer_comment-#{answer.id}")
            - if user_signed_in?
              = render 'web/shared/comment_form', comment: answer.comments.build, url: answer_comments_path(answer)
            - else
              = render 'comment_requires'

- if user_signed_in?
  - if @current_user_answer
    .text-center.lead= t('.answer_exists')
  - else
    = render partial: 'web/shared/answer_form', locals: { answer: @answer, url: resume_answers_path(@resume) }
- else
  = render 'answer_requires'
